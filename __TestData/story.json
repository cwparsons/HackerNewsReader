// 20190203090902
// https://api.hnpwa.com/v0/item/19068359.json

{
  "id": 19068359,
  "title": "The Soviet license plate game and Kolmogorov complexity",
  "points": 96,
  "user": "weinzierl",
  "time": 1549180446,
  "time_ago": "6 hours ago",
  "type": "link",
  "content": "",
  "comments": [
    {
      "id": 19068627,
      "user": "pqhwan",
      "time": 1549186461,
      "time_ago": "4 hours ago",
      "type": "comment",
      "content": "<p>Huh, I thought I was the only one playing this weird game in my head. I used to live in a country where license plates are all numeric digits. But with 4 digits and my limited knowledge of math operations (I was a child), it was hard to find plates that &quot;had solutions&quot;. So I gave myself a little wiggle room by imagining the numbers were written as they were on digital alarm clocks, where certain numbers (like {2,3,5} and {6,9}) required the same number of &quot;bars&quot; to represent [1]. I added a rule that the bars can be rearranged to form different numbers (e.g. 2, 3 and 5 can be rearranged as each other).<p>Eventually, I added another rule that allowed the bars to be &quot;concatenated,&quot; for example, &quot;1&quot; with two bars and &quot;2&quot; with 5 bars can be added to form &quot;8&quot;, which requires 7 bars.<p>[1] <a href=\"https:&#x2F;&#x2F;goo.gl&#x2F;images&#x2F;t2njyy\" rel=\"nofollow\">https:&#x2F;&#x2F;goo.gl&#x2F;images&#x2F;t2njyy</a>",
      "comments": [
        {
          "id": 19069412,
          "user": "huhtenberg",
          "time": 1549199886,
          "time_ago": "42 minutes ago",
          "type": "comment",
          "content": "<p>Trying to understand if a plate number is a prime also works quite well :) Though local congestions are rarely large enough to allow checking for factors over 11 or 13.",
          "comments": [

          ],
          "comments_count": 0,
          "level": 1,
          "url": "item?id=19069412"
        }
      ],
      "comments_count": 1,
      "level": 0,
      "url": "item?id=19068627"
    },
    {
      "id": 19068570,
      "user": "logram",
      "time": 1549185333,
      "time_ago": "5 hours ago",
      "type": "comment",
      "content": "<p>The article falls a bit short I think. What if you consider each function as one character? What about automatic generation of solutions? (Maybe by dynamic programming?) IMHO it proposes an interesting problem and brushes it off.",
      "comments": [

      ],
      "comments_count": 0,
      "level": 0,
      "url": "item?id=19068570"
    },
    {
      "id": 19068760,
      "user": "lelf",
      "time": 1549188891,
      "time_ago": "4 hours ago",
      "type": "comment",
      "content": "<p>The problem of complexity is solved neatly in Prolog and Erlang¹, by counting “reductions”.\nFor simple tasks like in the article,<p>one <i>function call</i> ≅ one reduction.<p>Loops?  There are no loops in Erlang, they are usually tail-recursive <i>function calls</i>.<p>¹) in Erlang it plays a very important role because the VM uses that information for scheduling.",
      "comments": [

      ],
      "comments_count": 0,
      "level": 0,
      "url": "item?id=19068760"
    },
    {
      "id": 19068720,
      "user": "sn41",
      "time": 1549188140,
      "time_ago": "4 hours ago",
      "type": "comment",
      "content": "<p>The issue with trying to apply Kolmogorov complexity to extremely small data (4 digits here) is that the universal Turing machine itself might take more than 4 digits to write down. In principle, one could extend it to any sufficiently long pair of n digits, and then the question would be mathematically robust (though still uncomputable).<p>Also, for what it&#x27;s worth, for large enough n, probably there are no interesting <i>short</i> answers. C(x|y) - the conditional complexity of any string x given any other string y is close to maximum (approximately the length of x) for most pairs x and y. This means, for most pairs x and y, there will be no simple <i>short</i> equations connecting x to y, regardless of the mathematical operators we take.",
      "comments": [

      ],
      "comments_count": 0,
      "level": 0,
      "url": "item?id=19068720"
    },
    {
      "id": 19068697,
      "user": "FartyMcFarter",
      "time": 1549187764,
      "time_ago": "4 hours ago",
      "type": "comment",
      "content": "<p>&gt; In theory you can enumerate all Turing machines of a given length, or all Python programs of a given length, and find the shortest one that does a given task, but the list grows exponentially with length.<p>Another problem with this strategy is that it generally requires solving the halting problem: you can only know whether a program &quot;does a given task&quot; when you know whether it halts or not.",
      "comments": [
        {
          "id": 19069210,
          "user": "gpm",
          "time": 1549196224,
          "time_ago": "2 hours ago",
          "type": "comment",
          "content": "<p>That&#x27;s only true if you care about knowing when you are done enumerating.<p>The definition of enumeration commonly used in computability does not require that you know when you are done enumerating.",
          "comments": [
            {
              "id": 19069504,
              "user": "algorias",
              "time": 1549201435,
              "time_ago": "16 minutes ago",
              "type": "comment",
              "content": "<p>&gt; The definition of enumeration commonly used in computability does not require that you know when you are done enumerating.<p>Sorry, but this is a non-sequitur. In order to find (by enumeration) the shortest program producing a certain output, you absolutely <i>do</i> need to know when you&#x27;re done, and thus you <i>do</i> need to solve the halting problem.",
              "comments": [

              ],
              "comments_count": 0,
              "level": 2,
              "url": "item?id=19069504"
            },
            {
              "id": 19069359,
              "user": "Hendrikto",
              "time": 1549198998,
              "time_ago": "an hour ago",
              "type": "comment",
              "content": "<p>How can you make progress if your first generated program does not halt?",
              "comments": [
                {
                  "id": 19069401,
                  "user": "gpm",
                  "time": 1549199684,
                  "time_ago": "an hour ago",
                  "type": "comment",
                  "content": "<p>Run things in parallel.<p>The idea behind most enumeration algorithms looks like this:<p><pre><code>    machines = {}\n    next_program = 0\n    loop forever:\n        machines.insert(new_turing_machine(next_program))\n        next_program++\n        for machine in machines:\n            machine.step()\n            if machine.halted():\n                machines.remove(machine)\n                if machine has output we want:\n                    yield machine</code></pre>",
                  "comments": [

                  ],
                  "comments_count": 0,
                  "level": 3,
                  "url": "item?id=19069401"
                }
              ],
              "comments_count": 1,
              "level": 2,
              "url": "item?id=19069359"
            }
          ],
          "comments_count": 3,
          "level": 1,
          "url": "item?id=19069210"
        }
      ],
      "comments_count": 4,
      "level": 0,
      "url": "item?id=19068697"
    },
    {
      "id": 19069382,
      "user": "danielovichdk",
      "time": 1549199398,
      "time_ago": "an hour ago",
      "type": "comment",
      "content": "<p>Some pretty advanced high school math operators for this game to work",
      "comments": [

      ],
      "comments_count": 0,
      "level": 0,
      "url": "item?id=19069382"
    },
    {
      "id": 19068637,
      "user": "luc4sdreyer",
      "time": 1549186623,
      "time_ago": "4 hours ago",
      "type": "comment",
      "content": "<p>One solution to the problem of measuring the length of the Python program is to turn it into machine code and measure that instead:<p><a href=\"https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;138521&#x2F;is-it-feasible-to-compile-python-to-machine-code\" rel=\"nofollow\">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;138521&#x2F;is-it-feasible-to...</a>",
      "comments": [
        {
          "id": 19068645,
          "user": "Y_Y",
          "time": 1549186876,
          "time_ago": "4 hours ago",
          "type": "comment",
          "content": "<p>Doesn&#x27;t this just kick the problem down the road? Now you&#x27;ve introduced the optimisation of the compiler abd the expressiveness of your processor&#x27;s machine language. The problem of knowing you have the &quot;best&quot; solution remains.<p>I think if you are trying to come up with a canonical languahe to measure kolmogorov complexity in you can do better, like Binary Lambda Calculus.<p><a href=\"https:&#x2F;&#x2F;tromp.github.io&#x2F;cl&#x2F;LC.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;tromp.github.io&#x2F;cl&#x2F;LC.pdf</a>",
          "comments": [

          ],
          "comments_count": 0,
          "level": 1,
          "url": "item?id=19068645"
        },
        {
          "id": 19069357,
          "user": "empath75",
          "time": 1549198965,
          "time_ago": "an hour ago",
          "type": "comment",
          "content": "<p>The compiler might optimize out the entire calculation because it won’t change at runtime.",
          "comments": [

          ],
          "comments_count": 0,
          "level": 1,
          "url": "item?id=19069357"
        }
      ],
      "comments_count": 2,
      "level": 0,
      "url": "item?id=19068637"
    },
    {
      "id": 19068525,
      "user": "yason",
      "time": 1549184709,
      "time_ago": "5 hours ago",
      "type": "comment",
      "content": "<p>And, of course, one must always ask what is the least number of bits required to explain Kolmogorov complexity.",
      "comments": [

      ],
      "comments_count": 0,
      "level": 0,
      "url": "item?id=19068525"
    },
    {
      "id": 19069001,
      "user": "aboutruby",
      "time": 1549192924,
      "time_ago": "3 hours ago",
      "type": "comment",
      "content": "<p>&gt; √74 = sec arctan sec arctan … √44.<p>He meant &quot;sec arctan sec arctan … √74 = √44.&quot; (sent him a message)<p>Also why not just applying the power 0 (assuming numbers are different than 0) both sides. Would be a school-level operation and very likely the shortest.",
      "comments": [
        {
          "id": 19069101,
          "user": "SamReidHughes",
          "time": 1549194523,
          "time_ago": "2 hours ago",
          "type": "comment",
          "content": "<p>You can&#x27;t write down new numbers in the formula.",
          "comments": [
            {
              "id": 19069351,
              "user": "aboutruby",
              "time": 1549198885,
              "time_ago": "an hour ago",
              "type": "comment",
              "content": "<p>Oh, I read too quickly, the ° is uses is the degree &quot;operator&quot; (it really isn&#x27;t an operator IMHO).",
              "comments": [

              ],
              "comments_count": 0,
              "level": 2,
              "url": "item?id=19069351"
            }
          ],
          "comments_count": 1,
          "level": 1,
          "url": "item?id=19069101"
        }
      ],
      "comments_count": 2,
      "level": 0,
      "url": "item?id=19069001"
    },
    {
      "id": 19068781,
      "user": "Annatar",
      "time": 1549189247,
      "time_ago": "4 hours ago",
      "type": "comment",
      "content": "<p>&quot;In theory you can enumerate all Turing machines of a given length, or all Python programs of a given length, and find the shortest one that does a given task, but the list grows exponentially with length.&quot;<p>Can it be proven that the shortest program is always the fastest?<p>This is the problem I had when studying mathematics and still have with mathematics to this day: mathematics when stripped and laid bare is just clever transformations, &quot;pouring from hollow into empty&quot;, as the old folks&#x27; saying goes. What is or are the practical applications of Kolmogorov complexity, how might I be able to turn this to my advantage?",
      "comments": [

      ],
      "comments_count": 0,
      "level": 0,
      "url": "item?id=19068781"
    },
    {
      "id": 19068731,
      "user": "Simon_says",
      "time": 1549188359,
      "time_ago": "4 hours ago",
      "type": "comment",
      "content": "<p>&gt; In theory you can enumerate all Turing machines of a given length, or all Python programs of a given length, and find the shortest one that does a given task, but the list grows exponentially with length.<p>That works as long as you solve the halting problem first.",
      "comments": [
        {
          "id": 19069222,
          "user": "kryptiskt",
          "time": 1549196402,
          "time_ago": "2 hours ago",
          "type": "comment",
          "content": "<p>You don&#x27;t have to do anything impossible, just something exceedingly impractical. Because we know that the function doesn&#x27;t halt if its runtime exceeds the busy beaver number for that length. Now, we will obviously not know that for any non-trivial length, but in theory it&#x27;s fine.",
          "comments": [

          ],
          "comments_count": 0,
          "level": 1,
          "url": "item?id=19069222"
        }
      ],
      "comments_count": 1,
      "level": 0,
      "url": "item?id=19068731"
    }
  ],
  "comments_count": 21,
  "url": "https://www.johndcook.com/blog/2019/02/02/landau-kolmogorov/",
  "domain": "johndcook.com"
}